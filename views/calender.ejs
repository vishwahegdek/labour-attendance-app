<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calendar</title>
    <style>
        body {
  font-family: 'Arial', sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f5f5f5;
}

h1 {
  text-align: center;
  color: #333;
}

div {
  display: flex;
  justify-content: space-around;
  align-items: center;
  margin: 20px 0;
}

button {
  background-color: #4caf50;
  color: white;
  border: none;
  padding: 10px 15px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  cursor: pointer;
}

button:hover {
  background-color: #45a049;
}

input {
  padding: 10px;
  font-size: 16px;
}

table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  border: 1px solid #ddd;
  padding: 15px;
  text-align: center;
}

th {
  background-color: #4caf50;
  color: white;
}

td {
  background-color: #fff;
}

a {
  display: block;
  margin-top: 20px;
  text-align: center;
  text-decoration: none;
  background-color: #4caf50;
  color: white;
  padding: 10px 15px;
  font-size: 16px;
}

a:hover {
  background-color: #45a049;
}

.calendar-date.today {
    background-color: #dd201c; /* Light red color, adjust as needed */
}


    </style>
</head>
<body>

<h1>Calendar</h1>
<div>
    <button onclick="goToSpecificMonthYear()">Go to Month/Year</button>
    <input type="text" id="inputMonth" placeholder="Enter Month (1-12)">
    <input type="text" id="inputYear" placeholder="Enter Year">
</div>

<div>
    
</div>
<div>
    <button onclick="prevMonth()">Previous Month</button>
    <button onclick="nextMonth()">Next Month</button>
</div>

<table id="calendar">
    <thead>
        <tr>
            <th>Sun</th>
            <th>Mon</th>
            <th>Tue</th>
            <th>Wed</th>
            <th>Thu</th>
            <th>Fri</th>
            <th>Sat</th>
        </tr>
    </thead>
    <tbody id="calendar-body">
    </tbody>
</table>
<a href="/findemp">Get Employee Data</a>
<a href="/newjoin">Edit Employee Details</a><br>
<script >
    
let currentDate = new Date();

document.addEventListener('DOMContentLoaded', function () {
    renderCalendar(currentDate);
    // Add event listener for date clicks
    document.getElementById('calendar-body').addEventListener('click', function (event) {
        if (event.target.classList.contains('calendar-date')) {
            const selectedDate = event.target.dataset.date;
            // Replace 'YOUR_CUSTOM_ROUTE' with the route you want to navigate to
            window.location.href = `/entry-route?date=${selectedDate}`;
        }
    });
});

function renderCalendar(date) {
    const calendarBody = document.getElementById('calendar-body');
    calendarBody.innerHTML = '';

    const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);
    const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);

    let currentDate = firstDay;
    let weekRow = document.createElement('tr');

    // Add empty cells for days before the first day of the month
    for (let i = 0; i < firstDay.getDay(); i++) {
        weekRow.appendChild(createEmptyCell());
    }

    while (currentDate <= lastDay) {
        if (currentDate.getDay() === 0 && weekRow.children.length > 0) {
            calendarBody.appendChild(weekRow);
            weekRow = document.createElement('tr');
        }

        weekRow.appendChild(createDateCell(currentDate));
        currentDate.setDate(currentDate.getDate() + 1);
    }

    // Add empty cells for remaining days in the last week
    for (let i = weekRow.children.length; i < 7; i++) {
        weekRow.appendChild(createEmptyCell());
    }

    calendarBody.appendChild(weekRow);
    updateInputFields();
}

function createDateCell(date) {
    const cell = document.createElement('td');
    cell.textContent = date.getDate();
    cell.classList.add('calendar-date');
    cell.dataset.date = formatDate(date);

    // Check if the current date cell corresponds to today's date
    if (isToday(date)) {
        cell.classList.add('today');
    }

    return cell;
}

// Add a new function to check if a date is today
function isToday(date) {
    const today = new Date();
    return (
        date.getDate() === today.getDate() &&
        date.getMonth() === today.getMonth() &&
        date.getFullYear() === today.getFullYear()
    );
}

function createEmptyCell() {
    const cell = document.createElement('td');
    return cell;
}

function formatDate(date) {
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const day = date.getDate();
    return `${year}-${month < 10 ? '0' : ''}${month}-${day < 10 ? '0' : ''}${day}`;
}

function prevMonth() {
    currentDate.setMonth(currentDate.getMonth() - 1);
    renderCalendar(currentDate);
}

function nextMonth() {
    currentDate.setMonth(currentDate.getMonth() + 1);
    renderCalendar(currentDate);
}

function goToSpecificMonthYear() {
    const inputMonth = parseInt(document.getElementById('inputMonth').value);
    const inputYear = parseInt(document.getElementById('inputYear').value);

    if (!isNaN(inputMonth) && !isNaN(inputYear) && inputMonth >= 1 && inputMonth <= 12) {
        currentDate.setFullYear(inputYear, inputMonth - 1, 1);
        renderCalendar(currentDate);
    } else {
        alert('Invalid input. Please enter a valid month (1-12) and year.');
    }
}

function updateInputFields() {
    document.getElementById('inputMonth').value = currentDate.getMonth() + 1;
    document.getElementById('inputYear').value = currentDate.getFullYear();
}
</script>

</body>
</html>

